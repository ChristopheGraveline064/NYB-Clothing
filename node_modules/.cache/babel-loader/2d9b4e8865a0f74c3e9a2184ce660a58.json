{"ast":null,"code":"// Copyright Guilherme Farias. and other Contributors\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation\n// files (the \"Software\"), to deal in the Software without\n// restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following\n// conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n// OTHER DEALINGS IN THE SOFTWARE.\nmodule.exports = function (accessToken) {\n  var q = require('q');\n\n  var https = require('https');\n\n  var query = require('querystring');\n\n  var host = 'api.instagram.com';\n  var port = 443;\n\n  function call(method, path, params, callback) {\n    var req;\n    var data = null;\n    var options;\n\n    if (!params) {\n      params = {};\n    }\n\n    params.access_token = accessToken;\n    options = {\n      host: host,\n      port: port,\n      method: method,\n      path: '/v1' + path + (method === 'GET' || method === 'DELETE' ? '?' + query.stringify(params) : ''),\n      headers: {}\n    };\n\n    if (method !== 'GET' && method !== 'DELETE') {\n      data = query.stringify(params);\n      options.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n      options.headers['Content-Length'] = data.length;\n    }\n\n    req = https.request(options, function (res) {\n      var body = '';\n      res.setEncoding('utf8');\n      res.on('data', function (chunk) {\n        body += chunk;\n      });\n      res.on('end', function () {\n        var result;\n        var limit = parseInt(res.headers['x-ratelimit-limit'], 10) || 0;\n        var remaining = parseInt(res.headers['x-ratelimit-remaining'], 10) || 0;\n\n        try {\n          result = JSON.parse(body);\n        } catch (err) {\n          err.details = body;\n          callback(err);\n          return;\n        }\n\n        callback(null, result, remaining, limit);\n      });\n    });\n    req.on('error', function (err) {\n      return callback(err);\n    });\n\n    if (data !== null) {\n      req.write(data);\n    }\n\n    req.end();\n  }\n\n  ;\n\n  function requestHandler(deferred) {\n    return function (err, result, remaining, limit) {\n      if (err) {\n        deferred.reject(err);\n        return;\n      }\n\n      if (result && result.meta && result.meta.code === 200) {\n        return deferred.resolve({\n          data: result.data,\n          pagination: result.pagination,\n          limit: limit,\n          remaining: remaining\n        });\n      } else if (result && result.meta) {\n        deferred.reject(result.meta);\n      } else {\n        deferred.reject(result);\n      }\n    };\n  }\n\n  ;\n\n  function userSelf() {\n    var deferred = q.defer();\n    var params = {};\n    call('GET', '/users/self', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function user(userId) {\n    var deferred = q.defer();\n    var params = {};\n    call('GET', '/users/' + userId, params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function userSelfMedia(options) {\n    var deferred = q.defer();\n    var params = {\n      count: 50\n    };\n\n    if (options && options.count) {\n      params.count = options.count;\n    }\n\n    if (options && options.min_id) {\n      params.min_id = options.min_id;\n    }\n\n    if (options && options.max_id) {\n      params.max_id = options.max_id;\n    }\n\n    call('GET', '/users/self/media/recent/', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function userMedia(userId, options) {\n    var deferred = q.defer();\n    var params = {\n      count: 50\n    };\n\n    if (options && options.count) {\n      params.count = options.count;\n    }\n\n    if (options && options.min_id) {\n      params.min_id = options.min_id;\n    }\n\n    if (options && options.max_id) {\n      params.max_id = options.max_id;\n    }\n\n    call('GET', '/users/' + userId + '/media/recent/', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function userSelfMediaLiked(options) {\n    var deferred = q.defer();\n    var params = {\n      count: 50\n    };\n\n    if (options && options.count) {\n      params.count = options.count;\n    }\n\n    if (options && options.max_like_id) {\n      params.max_like_id = options.max_like_id;\n    }\n\n    call('GET', '/users/self/media/liked/', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function userSearch(term, options) {\n    var deferred = q.defer();\n    var params = {\n      q: term,\n      count: 50\n    };\n\n    if (options && options.count) {\n      params.count = options.count;\n    }\n\n    call('GET', '/users/search', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function userSelfFollows(options) {\n    var deferred = q.defer();\n    var params = {};\n\n    if (options && options.cursor) {\n      params.cursor = options.cursor;\n    }\n\n    call('GET', '/users/self/follows/', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function userSelfFollowedBy(options) {\n    var deferred = q.defer();\n    var params = {};\n\n    if (options && options.cursor) {\n      params.cursor = options.cursor;\n    }\n\n    call('GET', '/users/self/followed-by/', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function userSelfRequestedBy() {\n    var deferred = q.defer();\n    var params = {};\n    call('GET', '/users/self/requested-by/', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function userRelationship(userId) {\n    var deferred = q.defer();\n    var params = {};\n    call('GET', '/users/' + userId + '/relationship', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function setUserRelationship(userId, action) {\n    var deferred = q.defer();\n    var params = {\n      action: action\n    };\n    call('POST', '/users/' + userId + '/relationship', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function media(mediaId) {\n    var deferred = q.defer();\n    var params = {};\n    call('GET', '/media/' + mediaId, params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function mediaByShortcode(shortcode) {\n    var deferred = q.defer();\n    var params = {};\n    call('GET', '/media/shortcode/' + shortcode, params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function mediaSearch(options) {\n    var deferred = q.defer();\n    var params = {\n      lat: options.lat,\n      lng: options.lng,\n      distance: options.distance\n    };\n    call('GET', '/media/search', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function mediaComments(mediaId) {\n    var deferred = q.defer();\n    var params = {};\n    call('GET', '/media/' + mediaId + '/comments', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function postMediaComment(mediaId, text) {\n    var deferred = q.defer();\n    var params = {\n      text: text\n    };\n    call('POST', '/media/' + mediaId + '/comments', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function removeMediaComment(mediaId, commentId) {\n    var deferred = q.defer();\n    var params = {};\n    call('DELETE', '/media/' + mediaId + '/comments/' + commentId, params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function mediaLikes(mediaId) {\n    var deferred = q.defer();\n    var params = {};\n    call('GET', '/media/' + mediaId + '/likes', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function postMediaLike(mediaId) {\n    var deferred = q.defer();\n    var params = {};\n    call('POST', '/media/' + mediaId + '/likes', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function removeMediaLike(mediaId) {\n    var deferred = q.defer();\n    var params = {};\n    call('DELETE', '/media/' + mediaId + '/likes', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function getTag(tagName) {\n    var deferred = q.defer();\n    var params = {};\n    call('GET', '/tags/' + tagName, params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function getMediasByTag(tagName, options) {\n    var deferred = q.defer();\n    var params = {\n      count: 50\n    };\n\n    if (options && options.count) {\n      params.count = options.count;\n    }\n\n    if (options && options.min_tag_id) {\n      params.min_tag_id = options.min_tag_id;\n    }\n\n    if (options && options.max_tag_id) {\n      params.max_tag_id = options.max_tag_id;\n    }\n\n    call('GET', '/tags/' + tagName + '/media/recent', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function searchTags(tagName) {\n    var deferred = q.defer();\n    var params = {\n      q: tagName\n    };\n    call('GET', '/tags/search', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function getLocation(locationId) {\n    var deferred = q.defer();\n    var params = {};\n    call('GET', '/locations/' + locationId, params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function getMediasByLocation(locationId, options) {\n    var deferred = q.defer();\n    var params = {};\n\n    if (options && options.min_id) {\n      params.min_id = options.min_id;\n    }\n\n    if (options && options.max_id) {\n      params.max_id = options.max_id;\n    }\n\n    call('GET', '/locations/' + locationId + '/media/recent', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n\n  function searchLocations(options) {\n    var deferred = q.defer();\n    var params = {};\n\n    if (options && options.lat) {\n      params.lat = options.lat;\n    }\n\n    if (options && options.lng) {\n      params.lng = options.lng;\n    }\n\n    if (options && options.distance) {\n      params.distance = options.distance;\n    }\n\n    if (options && options.facebook_places_id) {\n      params.facebook_places_id = options.facebook_places_id;\n    }\n\n    call('GET', '/locations/search', params, requestHandler(deferred));\n    return deferred.promise;\n  }\n\n  ;\n  return {\n    userSelf: userSelf,\n    user: user,\n    userSelfMedia: userSelfMedia,\n    userMedia: userMedia,\n    userSelfMediaLiked: userSelfMediaLiked,\n    userSearch: userSearch,\n    userSelfFollows: userSelfFollows,\n    userSelfFollowedBy: userSelfFollowedBy,\n    userSelfRequestedBy: userSelfRequestedBy,\n    userRelationship: userRelationship,\n    setUserRelationship: setUserRelationship,\n    media: media,\n    mediaByShortcode: mediaByShortcode,\n    mediaSearch: mediaSearch,\n    mediaComments: mediaComments,\n    postMediaComment: postMediaComment,\n    removeMediaComment: removeMediaComment,\n    mediaLikes: mediaLikes,\n    postMediaLike: postMediaLike,\n    removeMediaLike: removeMediaLike,\n    getTag: getTag,\n    getMediasByTag: getMediasByTag,\n    searchTags: searchTags,\n    getLocation: getLocation,\n    getMediasByLocation: getMediasByLocation,\n    searchLocations: searchLocations\n  };\n};","map":null,"metadata":{},"sourceType":"script"}